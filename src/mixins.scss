@use "@angular/material" as mat;
@use "sass:map";

// Define a custom mixin that takes in the current theme
@mixin bg-util($theme) {
  // Parse the theme and create variables for each color in the pallete
  $primary: map.get($theme, primary);
  $accent: map.get($theme, accent);
  $warn: map.get($theme, warn);
  // Create theme specfic styles
  .bg-primary {
    background-color: mat.get-color-from-palette($primary);
  }
  .bg-accent {
    background-color: mat.get-color-from-palette($accent);
  }
  .bg-warn {
    background-color: mat.get-color-from-palette($warn);
  }
}

@mixin fg-util($theme) {
  // Parse the theme and create variables for each color in the pallete
  $primary: map.get($theme, primary);
  $accent: map.get($theme, accent);
  $warn: map.get($theme, warn);
  // Create theme specfic styles
  .fg-primary {
    color: mat.get-color-from-palette($primary);
  }
  .fg-accent {
    color: mat.get-color-from-palette($accent);
  }
  .fg-warn {
    color: mat.get-color-from-palette($warn);
  }
}

@mixin mat-hint-fix() {
  mat-hint.mat-mdc-form-field-hint.mat-mdc-form-field-bottom-align {
    color: rgba(0, 0, 0, 0.6);
    font-size: 75%;

    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

@mixin extend-map($map) {
  @each $key, $value in $map {
    #{$key}: #{$value};
  }
}

@mixin max-lines-util() {
  @for $i from 1 through 9 {
    .max-lines-#{$i} {
      overflow: hidden;
      display: -webkit-box;
      -webkit-line-clamp: $i; /* number of lines to show */
      line-clamp: $i;
      -webkit-box-orient: vertical;
    }
  }
}
